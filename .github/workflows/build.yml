# GitHub Action for Laravel with MySQL and Redis
name: production_line_api
on: [push, pull_request]
jobs:
  build-js:
    name: Build JS/CSS 🔧
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code 🛎️
        uses: actions/checkout@v1

      - name: Yarn build 🔧
        run: |
          yarn install
          yarn prod
          cat public/mix-manifest.json # See asset version in log
      - name: Upload build files 💾
        uses: actions/upload-artifact@v1
        with:
          name: front-end
          path: public

  test-php-linux:
    name: Build PHP Laravel (PHP ${{ matrix.php-versions }}) - Linux 🔧
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 'secret'
          MYSQL_DATABASE: 'production_line_testing'
          MYSQL_USER: 'rik'
          MYSQL_PASSWORD: 'secret'
        ports:
          - 3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.4']
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions 🔧
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug #optional

      - name: Start mysql service 🚀
        run: sudo /etc/init.d/mysql start

      - name: Get composer cache directory 🔧
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies 🔧
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies🔧
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Copy Env File 🔧
        run: cp .env.testing .env

      - name: Migrate Test Database 🚀
        run: php artisan migrate --env=testing --seed --force
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}

      - name: Change Directory Permissions 🔧
        run: chmod -R 777 storage bootstrap/cache

      - name: Static Analysis via PHPStan 🔧
        run: ./vendor/bin/phpstan analyse --memory-limit=2G

      - name: Execute tests (Unit and Feature tests) via PHPUnit 🚀
        run: vendor/bin/phpunit
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}

      - name: Upload build files 💾
        uses: actions/upload-artifact@v1
        with:
          name: back-end
          path: public

  docker-hub:
    name: Create docker hub container  🚀
    runs-on: ubuntu-latest
    needs: [build-js, test-php-linux]
    steps:
      - name: Checkout code  🛎️
        uses: actions/checkout@v1

  deploy:
    name: Deploy to Production 🚀
    runs-on: ubuntu-latest
    needs: [build-js, test-php-linux]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v1
      - name: Download build assets
        uses: actions/download-artifact@v1
        with:
          name: assets
          path: public
#      - name: Setup PHP
#        uses: atymic/deployer-php-action@master
#        with:
#          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#          ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
#      - name: Deploy to Prod
#        env:
#          DOT_ENV: ${{ secrets.DOT_ENV }}
#        run: dep deploy production --tag=${{ env.GITHUB_REF }} -vvv




